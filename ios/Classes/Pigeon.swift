// Autogenerated from Pigeon (v3.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

/// Generated class from Pigeon that represents data sent in messages.
struct Model {
  var id: Int32
  var title: String

  static func fromMap(_ map: [String: Any?]) -> Model? {
    let id = map["id"] as! Int32
    let title = map["title"] as! String

    return Model(
      id: id,
      title: title
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "id": id,
      "title": title
    ]
  }
}
private class ModelApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Model.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class ModelApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Model {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class ModelApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ModelApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ModelApiCodecWriter(data: data)
  }
}

class ModelApiCodec: FlutterStandardMessageCodec {
  static let shared = ModelApiCodec(readerWriter: ModelApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ModelApi {
  func getModel(id: Int32) -> Model?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ModelApiSetup {
  /// The codec used by ModelApi.
  static var codec: FlutterStandardMessageCodec { ModelApiCodec.shared }
  /// Sets up an instance of `ModelApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ModelApi?) {
    let getModelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ModelApi.getModel", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getModelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! Int32
        let result = api.getModel(id: idArg)
        reply(wrapResult(result))
      }
    } else {
      getModelChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
